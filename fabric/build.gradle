plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "<https://maven.shedaniel.me/>" }
    maven { url "<https://maven.architectury.dev/>" }
    maven { url = "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://cursemaven.com" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    implementation 'org.mariuszgromada.math:MathParser.org-mXparser:5.2.1'

    modCompileOnly("com.terraformersmc:modmenu:${rootProject.mod_menu_version}") { transitive false }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")

    modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:$rei_version"
    modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:$rei_version"

    // Required to run JEI
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

    // Required to run REI
    //modRuntimeOnly "dev.architectury:architectury-fabric:${rootProject.architectury_version}"
    //modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:$rei_version"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
    inputs.property "version", project.version
}

shadowJar {
    exclude "architectury-common.accessWidener"
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    afterEvaluate {
        [":common"].forEach {
            def depSources = project(it).sourcesJar
            dependsOn depSources
            from(depSources.archiveFile.map { zipTree(it) }) {
                exclude "immersive_aircraft.accessWidener"
            }
        }
    }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archives_base_name
            groupId = rootProject.groupId
            version = version + "+fabric"
            from components.java
        }
    }

    repositories {
        maven {
            name = "reposiliteRepository"
            url = uri("https://maven.conczin.net/Artifacts")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_TOKEN")
            }
        }
    }
}
